(()=>{"use strict";var t;!function(t){t.image="image",t.name="name",t.status="status",t.species="species",t.type="type",t.origin="origin",t.firstepisode="firstepisode"}(t||(t={}));class e extends HTMLElement{static get observedAttributes(){return Object.keys(t)}constructor(){super(),this.attachShadow({mode:"open"})}attributeChangedCallback(t,e,n){this[t]=n,this.render()}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n\n            <div id="card">\n            <div>\n               <img src="${this.image||"No image"}" alt="imagen de: ${this.name}">\n            </div>\n\n            <div id="txt">\n            <h1>${this.name||"No name"}</h1>\n            <p>Status: ${this.status||"No ID"}</p>\n            <p>Specie: ${this.species||"No specie"}</p>\n            <p>Type: ${this.type||"No type"}</p>\n            <p>Origin: ${this.origin||"No origin"}</p>\n            <p>First episode: ${this.firstepisode||"No episode yet"}</p>\n            </div>\n\n            </div>\n\n            `)}}customElements.define("character-component",e);class n extends HTMLElement{constructor(){super(),this.arrayCharacter=[],this.dataRickNMorty=[],this.attachShadow({mode:"open"})}connectedCallback(t){return e=this,n=void 0,o=function*(){this.inputValue(),this.dataRickNMorty=yield(t=>{return e=void 0,n=void 0,o=function*(){try{return yield fetch(`https://rickandmortyapi.com/api/character/${t}`).then((t=>t.json()))}catch(t){console.error("Error fetching data:",t)}},new((i=void 0)||(i=Promise))((function(t,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(s,a)}c((o=o.apply(e,n||[])).next())}));var e,n,i,o})(t),this.createCardsRickAndMorty(),this.render()},new((i=void 0)||(i=Promise))((function(t,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(s,a)}c((o=o.apply(e,n||[])).next())}));var e,n,i,o}createCardsRickAndMorty(){this.dataRickNMorty.forEach((e=>{const n=this.ownerDocument.createElement("character-component");n.setAttribute(t.image,e.image),n.setAttribute(t.name,e.name),n.setAttribute(t.status,e.status),n.setAttribute(t.species,e.species),n.setAttribute(t.type,e.type),n.setAttribute(t.origin,e.origin.name),n.setAttribute(t.firstepisode,e.episode),this.arrayCharacter.push(n)}))}inputValue(){var t,e;const n=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector(".form"),i=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(".input");n&&n.addEventListener("submit",(t=>{if(t.preventDefault(),i){const t=Number(i.value);this.connectedCallback(t),console.log(t)}n.reset()}))}render(){this.shadowRoot&&(this.shadowRoot.innerHTML='\n            <h1>Rick and Morty Cards</h1>\n            <form class="form">\n            <input type = "number" placeholder="Pick a number" class= "input" required>\n            <button>Send</button>\n            <div class="cardsDiv"></div>\n            </form>',this.arrayCharacter.forEach((t=>{var e,n;null===(e=this.shadowRoot)||void 0===e||e.appendChild(t);const i=this.ownerDocument.createElement("hr");null===(n=this.shadowRoot)||void 0===n||n.appendChild(i)})))}}customElements.define("app-container",n)})();